#
# Copyright 2020, Data61, CSIRO (ABN 41 687 119 230)
#
# SPDX-License-Identifier: BSD-2-Clause
#

# this script indicates how this example was built. some of the configuration
# is specific to the machine it was built on, but it may serve to explain
# where everything comes from.

TOOLPREFIX=/opt/ertos/toolchains-x86_64/arm-2010.09/bin/arm-none-eabi-
GCC="$TOOLPREFIX"gcc
OBJDUMP="$TOOLPREFIX"objdump
HOL4=$(readlink -f ../../HOL4)
DECOMP="$HOL4"/examples/machine-code/graph/decompile.py

WD=$(pwd)
for OPT in O1 O2
do

  # the binary is produced by GCC.

  $GCC -"$OPT" -c loop.c -o "$OPT"/loop-"$OPT".o

  # the disassembly comes from objdump.
  $OBJDUMP -d "$OPT"/loop-"$OPT".o > "$OPT"/loop-"$OPT".elf.txt

  # the symbol table is also extracted (target.py reads .symtab).
  $OBJDUMP -t "$OPT"/loop-"$OPT".o > "$OPT"/loop-"$OPT".elf.symtab

  # the standalone NICTA c-parser is used to extract function signatures
  # from the source file.
  c-parser --mmbytes loop.c > "$OPT"/loop-"$OPT".sigs

  # the decompiler reads the disassembly and signatures and produces
  # the binary functions.
  PATH=$HOL4/bin:$PATH which Holmake
  PATH=$HOL4/bin:$PATH $DECOMP --fast "$OPT"/loop-"$OPT"

  # change the naming convention _mc_graph.txt, though there's nothing wrong
  # with it
  mv "$OPT"/loop-"$OPT"_mc_graph.txt "$OPT"/ASM"$OPT"Functions.txt

done

